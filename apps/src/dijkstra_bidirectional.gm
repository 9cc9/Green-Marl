/*: Check for boundary cases
 */
Procedure bidir_dijkstra (G: Graph,
        Weight: E_P<Double>,
        src, dst: Node;
        Parent: N_P<Node>) : Bool
{
    N_P<Bool> FReached;
    N_P<Bool> RReached;
    Map<Node, Double> FReachable;
    Map<Node, Double> RReachable;

    G.Parent = NIL;
    G.FReached = False;
    G.RReached = False;
    FReachable[src] = 0.0;
    RReachable[dst] = 0.0;


    // Temporary data structures
    N_P<Node> RParent;
    N_P<Double> FCost;
    N_P<Double> RCost;
    G.RParent = NIL;
    G.FCost = +INF;
    G.RCost = +INF;

    /*
     *  Perform Dijkstra algorithm starting from src and dst
     *      one step at a time in both directions.
     *  When the two searches meet, we have a node 'u' which
     *      shows a possible shortest path from src to dst.
     *  Continue the searches in both direction, updating the
     *      shortest path as and when new shorter paths are found.
     *  Prune the search space beyond the first candidate shortest as follows:
     *      Suppose you get node v from the Priority Queue in forward search
     *      and you are looking to expand v to a node x.
     *      If DistanceFromSrc(v) + weight(v,x) + Min distance in backward search so far
     *      > cost of shortest path, do no expand to x.
     */
    Double minFDist = 0.0;
    Double minRDist = 0.0;
    Double minCost = +INF;
    Node mid = NIL;
    While (FReachable.Size() != 0 || RReachable.Size() != 0) {
        If (FReachable.Size() != 0) {
            Node(G) fnext = FReachable.GetMinKey();
            fnext.FReached = True;
            fnext.FCost = FReachable[fnext];
            minFDist = fnext.FCost;
            FReachable.Remove(fnext);
            If (fnext.RReached) {
                Double newCost = fnext.FCost + fnext.RCost;
                <minCost; mid> min= <newCost; fnext>; 
            }

            Double fdist = fnext.FCost;
            For(v: fnext.Nbrs) (!v.FReached) {
                Edge e = v.ToEdge();
                If (fdist + e.Weight + minRDist <= minCost) {
                    If ( ! FReachable.HasKey(v)) {
                        FReachable[v] = fdist + e.Weight;
                        v.Parent = fnext;
                    } Else If (FReachable[v] > fdist + e.Weight) {
                        FReachable[v] = fdist + e.Weight;
                        v.Parent = fnext;
                    }
                }
            }
        }

        If (RReachable.Size() != 0) {
            Node(G) rnext = RReachable.GetMinKey();
            rnext.RReached = True;
            rnext.RCost = RReachable[rnext];
            minRDist = rnext.RCost;
            RReachable.Remove(rnext);
            If (rnext.FReached) {
                Double newCost = rnext.FCost + rnext.RCost;
                <minCost; mid> min= <newCost; rnext>;
            }
                
            Double rdist = rnext.RCost;
            For(v: rnext.InNbrs) (!v.RReached) {
                Edge e = v.ToEdge();
                If (rdist + e.Weight + minFDist <= minCost) {
                    If ( ! RReachable.HasKey(v)) {
                        RReachable[v] = rdist + e.Weight;
                        v.RParent = rnext;
                    } Else If (RReachable[v] > rdist + e.Weight) {
                        RReachable[v] = rdist + e.Weight;
                        v.RParent = rnext;
                    }
                }
            }
        }
    }

    // If a path was found
    If (mid != NIL) {
        // Update the 'Parent' property of all the nodes in the path from mid to dst
        Node cur = mid;
        While (cur != dst) {
            Node prev = cur.RParent;
            prev.Parent = cur;
            cur = prev;
        }

        Return True;
    }
    
    // No path was found
    Return False;
}

Procedure get_path(G: Graph, src, dst: Node, prev_node: N_P<Node>; Q: Node_Seq) {
    Node(G) n = dst;
    If (dst.prev_node != NIL) {
        While (n != src) {
            Q.PushFront(n);
            n = n.prev_node;
        }
    }
}



