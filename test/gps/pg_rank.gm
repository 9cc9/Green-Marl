Procedure pg_rank(G: Graph, e: Double, d: Double, max: Int,
                   pg_rank: N_P<Double>(G))
{
    Double diff;
    Int cnt = 0;
    Double N = (Double) G.NumNodes();
    G.pg_rank = 1.0 / N;

    N_P<Double>(G) nb_sum; // temporary field to hold received data

    Do {
        diff = 0.0;
        G.nb_sum = 0;

        Foreach (t: G.Nodes){
            Foreach (w: t.Nbrs) {
                Double z = t.pg_rank / t.OutDegree();
                w.nb_sum += z;
            }
        }

        Foreach (t: G.Nodes) {
            Double val = (1-d) / N + d* t.nb_sum;
            diff += | val - t.pg_rank |;
            // update to pg_rank becomes visible at the end of t-loop
            t.pg_rank <= val @ t; 
        } 

        cnt++;
    } While ((diff > e) && (cnt < max));
}
